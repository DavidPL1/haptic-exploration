#!/usr/bin/env python

import rospy
from rospkg import RosPack
import xacro

import numpy as np
import os
import os.path as osp

from haptic_exploration import mujoco_config
from haptic_exploration.config import ObjectSet
from haptic_exploration.sample import sample_objects, SamplingConfig, get_sampling_dir
from haptic_exploration.data import GlanceTable
from haptic_exploration.util import deg2rad

from std_srvs.srv import Empty, EmptyRequest

if __name__ == '__main__':

    use_panda = rospy.get_param("/record_ycb_data/use_panda", 0)
    num_splits = rospy.get_param("/record_ycb_data/num_splits", 1)
    chunk = rospy.get_param("/record_ycb_data/chunk", 0)
    rospy.logwarn(f"num_splits: {num_splits}; chunk: {chunk}")
    assert chunk < num_splits, "Chunk must be smaller than num_splits!"

    base_ycb_dir = osp.join(RosPack().get_path('haptic_exploration'), 'assets', 'meshes', 'ycb')
    available_objects = os.listdir(base_ycb_dir)
    available_objects = [x for x in available_objects if osp.isdir(osp.join(base_ycb_dir, x))]
    available_objects = [x for x in available_objects if x in mujoco_config.ycb_objects.values()]
    rospy.logwarn(f"Available objects: {available_objects}")

    sampling_config = SamplingConfig(
        ObjectSet.YCB,
        dict(),
        # TODO: correct sampling spec: [("x", 41), ("y", 31)],
        [("x", 3), ("y", 3)],
        mujoco_config.ycb_glance_area,
        deg2rad(20),
        mujoco_config.ycb_z_buffer,
        deg2rad(10)
    )

    # convert index footprints to meter
    scale = 2e-2
    glance_table = GlanceTable(ObjectSet.YCB)
    footprints = {glance_table.id_label[object_idx]: (((x0-10)*scale, (x1-10)*scale), ((y0-7.5)*scale, (y1-7.5)*scale)) for object_idx, ((x0, x1), (y0, y1)) in glance_table.object_indices.items()}

    # Check already sampled objects for this config
    already_sampled = [f.stem for f in get_sampling_dir(sampling_config).glob('*.pkl')]
    rospy.logwarn(f"already_sampled: {already_sampled}")

    available_objects = [obj for obj in available_objects if obj not in already_sampled]
    available_objects = [object_name for object_name in available_objects if object_name in footprints.keys()]

    rospy.logwarn(f"Filtered objects: {available_objects}")
    available_objects = [list(mujoco_config.ycb_objects.keys())[list(mujoco_config.ycb_objects.values()).index(x)] for x in available_objects]

    if num_splits > 1:
        splits = np.array_split(available_objects, num_splits)
        chosen_object_ids = splits[chunk]
        chosen_object_dict = {id: mujoco_config.ycb_objects[id] for id in chosen_object_ids}
    else:
        chosen_object_dict = {id: mujoco_config.ycb_objects[id] for id in available_objects}

    # TODO: remove
    chosen_object_dict = {15: "015_peach"}

    rospy.logwarn(f"Objects handled by this run: {chosen_object_dict.values()}")

    sampling_config.object_dict = chosen_object_dict
    sample_objects(sampling_config, use_panda, footprints=footprints)

    rospy.ServiceProxy("/mujoco_server/shutdown", Empty)(EmptyRequest())
